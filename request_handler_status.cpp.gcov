        -:    0:Source:request_handler_status.cpp
        -:    0:Programs:4
        -:    1:#include "request_handler_status.h"
        -:    2:
        -:    3:namespace http {
        -:    4:namespace server {
        -:    5:
        2:    6:	RequestHandler::Status StatusHandler::Init(const std::string& uri_prefix, const NginxConfig& config) {
        -:    7:		
        2:    8:	return RequestHandler::Status::OK;
        -:    9:	}
        -:   10:
        -:   11:
        1:   12:	RequestHandler::Status StatusHandler::HandleRequest(const Request& request, Response* response) {
        1:   13:	  	std::cout << "StatusHandler::HandleRequest called" << std::endl;
        -:   14:
        2:   15:  		std::vector<std::pair<std::string, Response::ResponseCode>> requests = ServerMonitor::getInstance()->getRequests();
        2:   16:    	std::vector<std::pair<std::string, std::string>> handlers = ServerMonitor::getInstance()->getHandlers();
        -:   17:  		
        1:   18:  		int numRequests = requests.size(); 
        -:   19:
        2:   20:  		std::string body = "<html><body><h1>";
        1:   21:  		body += "There were " + to_string(numRequests) + " requests done on this server</h1>";
        1:   22:  		body += "<p>"; 
        2:   23:  		for(auto iterator = requests.begin(); iterator != requests.end(); iterator++) {
        2:   24:  		  std::string responseString = "";
        1:   25:		  switch(iterator->second) {
        -:   26:			case Response::OK:
        1:   27:				responseString += "200";
        1:   28:				break; 
        -:   29:			case Response::BAD_REQUEST: 
    #####:   30:				responseString += "400";
    #####:   31:				break;
        -:   32:			case Response::NOT_FOUND:
    #####:   33:				responseString += "404";
    #####:   34:				break;
        -:   35:		  }
        -:   36:
        1:   37:  		  body += iterator->first + " " +  responseString + "<br>"; 
        -:   38:      	}
        1:   39:      	body += "</p>"; 
        -:   40:
        1:   41:      	body += "<h1> These are the current handlers and their URL prefixes </h1><p>"; 
        2:   42:      	for(auto iterator = handlers.begin(); iterator != handlers.end(); iterator++) {
        1:   43:		  body += iterator->first + " " +  iterator->second + "<br>"; 
        -:   44:      	}
        1:   45:      	body += "</p>"; 
        1:   46:      	body += "</body></html>"; 
        -:   47:
        1:   48:      	response->SetStatus(Response::ResponseCode::OK);
        1:   49:	  	response->AddHeader("Content-Type", "text/html");
        1:   50:	  	response->AddHeader("Content-Length", std::to_string(body.length()));
        1:   51:	  	response->SetBody(body);
        -:   52:
        2:   53:		return RequestHandler::Status::OK;
        -:   54:	}
        -:   55:	
        -:   56:} // namespace server
        3:   57:} // namespace http
