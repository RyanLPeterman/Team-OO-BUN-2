        -:    0:Source:reply.h
        -:    0:Programs:4
        -:    1:#ifndef HTTP_REPLY_HPP
        -:    2:#define HTTP_REPLY_HPP
        -:    3:
        -:    4:#include <string>
        -:    5:#include <vector>
        -:    6:#include <boost/asio.hpp>
        -:    7:#include "header.hpp"
        -:    8:
        -:    9:namespace http {
        -:   10:namespace server {
        -:   11:
        -:   12:/// A reply to be sent to a client.
       88:   13:struct reply
        -:   14:{
        -:   15:  /// The status of the reply.
        -:   16:  enum status_type
        -:   17:  {
        -:   18:    ok = 200,
        -:   19:    created = 201,
        -:   20:    accepted = 202,
        -:   21:    no_content = 204,
        -:   22:    multiple_choices = 300,
        -:   23:    moved_permanently = 301,
        -:   24:    moved_temporarily = 302,
        -:   25:    not_modified = 304,
        -:   26:    bad_request = 400,
        -:   27:    unauthorized = 401,
        -:   28:    forbidden = 403,
        -:   29:    not_found = 404,
        -:   30:    internal_server_error = 500,
        -:   31:    not_implemented = 501,
        -:   32:    bad_gateway = 502,
        -:   33:    service_unavailable = 503
        -:   34:  } status;
        -:   35:
        -:   36:  /// The headers to be included in the reply.
        -:   37:  std::vector<header> headers;  // we only have to handle one resquest at a time, only one header needed.
        -:   38:
        -:   39:  /// The content to be sent in the reply.
        -:   40:  std::string content;
        -:   41:
        -:   42:  /// Convert the reply into a vector of buffers. The buffers do not own the
        -:   43:  /// underlying memory blocks, therefore the reply object must remain valid and
        -:   44:  /// not be changed until the write operation has completed.
        -:   45:  std::vector<boost::asio::const_buffer> to_buffers();
        -:   46:
        -:   47:  /// Get a stock reply.
        -:   48:  static reply stock_reply(status_type status);
        -:   49:};
        -:   50:
        -:   51:} // namespace server
        -:   52:} // namespace http
        -:   53:
        -:   54:#endif // HTTP_REPLY_HPP
