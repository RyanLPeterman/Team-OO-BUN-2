        -:    0:Source:request_parser.hpp
        -:    0:Programs:4
        -:    1:#ifndef HTTP_REQUEST_PARSER_HPP
        -:    2:#define HTTP_REQUEST_PARSER_HPP
        -:    3:
        -:    4:#include <tuple>
        -:    5:#include <iostream>
        -:    6:
        -:    7:namespace http {
        -:    8:namespace server {
        -:    9:
        -:   10:    struct request;
        -:   11:
        -:   12:    /// Parser for incoming requests.
        -:   13:    class request_parser
        -:   14:    {
        -:   15:    public:
        -:   16:      /// Construct ready to parse the request method.
        -:   17:      request_parser();
        -:   18:
        -:   19:      /// Reset to initial parser state.
        -:   20:      void reset();
        -:   21:
        -:   22:      /// Result of parse.
        -:   23:      enum result_type { good, bad, indeterminate };
        -:   24:
        -:   25:      /// Parse some data. The enum return value is good when a complete request has
        -:   26:      /// been parsed, bad if the data is invalid, indeterminate when more data is
        -:   27:      /// required. The InputIterator return value indicates how much of the input
        -:   28:      /// has been consumed.
        -:   29:      template <typename InputIterator>
    #####:   30:      std::tuple<result_type, InputIterator> parse(request& req,
        -:   31:          InputIterator begin, InputIterator end)
        -:   32:      {
    #####:   33:        while (begin != end)
        -:   34:        {
    #####:   35:          result_type result = consume(req, *begin++);
    #####:   36:          if (result == good || result == bad) {
    #####:   37:            return std::make_tuple(result, begin);
        -:   38:          }
        -:   39:        }
    #####:   40:        return std::make_tuple(indeterminate, begin);
        -:   41:      }
        -:   42:
        -:   43:    private:
        -:   44:      /// Handle the next character of input.
        -:   45:      result_type consume(request& req, char input);
        -:   46:
        -:   47:      /// Check if a byte is an HTTP character.
        -:   48:      static bool is_char(int c);
        -:   49:
        -:   50:      /// Check if a byte is an HTTP control character.
        -:   51:      static bool is_ctl(int c);
        -:   52:
        -:   53:      /// Check if a byte is defined as an HTTP tspecial character.
        -:   54:      static bool is_tspecial(int c);
        -:   55:
        -:   56:      /// Check if a byte is a digit.
        -:   57:      static bool is_digit(int c);
        -:   58:
        -:   59:      /// The current state of the parser.
        -:   60:      enum state
        -:   61:      {
        -:   62:        method_start,
        -:   63:        method,
        -:   64:        uri,
        -:   65:        http_version_h,
        -:   66:        http_version_t_1,
        -:   67:        http_version_t_2,
        -:   68:        http_version_p,
        -:   69:        http_version_slash,
        -:   70:        http_version_major_start,
        -:   71:        http_version_major,
        -:   72:        http_version_minor_start,
        -:   73:        http_version_minor,
        -:   74:        expecting_newline_1,
        -:   75:        header_line_start,
        -:   76:        header_lws,
        -:   77:        header_name,
        -:   78:        space_before_header_value,
        -:   79:        header_value,
        -:   80:        expecting_newline_2,
        -:   81:        expecting_newline_3
        -:   82:      } state_;
        -:   83:    };
        -:   84:
        -:   85:  } // namespace server
        -:   86:} // namespace http
        -:   87:
        -:   88:#endif // HTTP_REQUEST_PARSER_HPP
