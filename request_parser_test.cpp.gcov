        -:    0:Source:request_parser_test.cpp
        -:    0:Graph:request_parser_test.gcno
        -:    0:Data:request_parser_test.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "gtest/gtest.h"
        -:    2:#include "request.hpp"
        -:    3:#include "request_parser.hpp"
        -:    4:
       12:    5:class RequestParserTest : public ::testing::Test {
        -:    6:protected:
        -:    7:	http::server::request_parser request_parser_;
        -:    8:	http::server::request_parser::result_type result;
        -:    9:	http::server::request request_;
        -:   10:};
        -:   11:
        -:   12:// Check method is parsed
        5:   13:TEST_F(RequestParserTest, MethodTest) {
        1:   14:	std::string input_request = "GET /echo HTTP/1.1\r\nHost: localhost:1080\r\n\r\n";
        -:   15:
        2:   16:	std::tie(result, std::ignore) = request_parser_.parse(
        1:   17:          request_, input_request.begin(), input_request.end());
        -:   18:
        1:   19:	EXPECT_EQ(request_.method, "GET");
        1:   20:}
        -:   21:
        -:   22:// Check that the result of the parsing is good
        5:   23:TEST_F(RequestParserTest, GoodResponseTest) {
        -:   24:	std::string input_request = "GET /echo HTTP/1.1\r\n"
        -:   25:								"Host: localhost:1080\r\n"
        -:   26:								"User-Agent: Mozilla/5.0\r\n"
        1:   27:								"Accept: text/html\r\n\r\n";
        -:   28:
        2:   29:	std::tie(result, std::ignore) = request_parser_.parse(
        1:   30:          request_, input_request.begin(), input_request.end());
        -:   31:
        1:   32:	EXPECT_EQ(http::server::request_parser::good, result);
        1:   33:}
        -:   34:
        -:   35:// Check the parsed header names
        5:   36:TEST_F(RequestParserTest, HeaderNameTest) {
        -:   37:	std::string input_request = "GET /echo HTTP/1.1\r\n"
        -:   38:								"Host: localhost:1080\r\n"
        -:   39:								"User-Agent: Mozilla/5.0\r\n" 
        1:   40:								"Accept: text/html\r\n\r\n";
        -:   41:
        2:   42:	http::server::header headers[3];
        1:   43:	headers[0].name = "Host";
        1:   44:	headers[1].name = "User-Agent";
        1:   45:	headers[2].name = "Accept";
        -:   46:
        2:   47:	std::tie(result, std::ignore) = request_parser_.parse(
        1:   48:          request_, input_request.begin(), input_request.end());
        -:   49:
        4:   50:	for (int i = 0; i < 3; i++)
        -:   51:	{
        3:   52:		EXPECT_EQ(request_.headers[i].name, headers[i].name);
        1:   53:	}
        1:   54:}
        -:   55:
        -:   56:// Check the parsed header values
        5:   57:TEST_F(RequestParserTest, HeaderValueTest) {
        -:   58:	std::string input_request = "GET /echo HTTP/1.1\r\n"
        -:   59:								"Host: google.com\r\n"
        -:   60:								"User-Agent: testagent\r\n" 
        1:   61:								"Accept: text/plain\r\n\r\n";
        -:   62:
        2:   63:	http::server::header headers[3];
        1:   64:	headers[0].value = "google.com";
        1:   65:	headers[1].value = "testagent";
        1:   66:	headers[2].value = "text/plain";
        -:   67:
        2:   68:	std::tie(result, std::ignore) = request_parser_.parse(
        1:   69:          request_, input_request.begin(), input_request.end());
        -:   70:
        4:   71:	for (int i = 0; i < 3; i++)
        -:   72:	{
        3:   73:		EXPECT_EQ(request_.headers[i].value, headers[i].value);
        1:   74:	}
        1:   75:}
        -:   76:
        -:   77:// Check that the result of the parse is bad
        5:   78:TEST_F(RequestParserTest, BadResponseTest) {
        1:   79:	std::string input_request = "Random line of text here\r\n\r\n";
        -:   80:
        2:   81:	std::tie(result, std::ignore)  = request_parser_.parse(
        1:   82:          request_, input_request.begin(), input_request.end());
        -:   83:
        1:   84:	EXPECT_FALSE(request_.method == "GET");
        1:   85:	EXPECT_EQ(http::server::request_parser::bad, result);
        1:   86:}
        -:   87:
        -:   88:// Check that the result of the parse is indeterminate
        5:   89:TEST_F(RequestParserTest, IndeterminateResponseTest) {
        1:   90:	std::string input_request = "GET /index.html HTTP/1.1";
        -:   91:
        2:   92:	std::tie(result, std::ignore)  = request_parser_.parse(
        1:   93:          request_, input_request.begin(), input_request.end());
        -:   94:
        1:   95:	EXPECT_TRUE(request_.method == "GET");
        1:   96:	EXPECT_EQ(http::server::request_parser::indeterminate, result);
        4:   97:}
